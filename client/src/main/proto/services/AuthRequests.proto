/**
 * Copyright 2011-2016 Green Energy Corp.
 *
 * Licensed to Green Energy Corp (www.greenenergycorp.com) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. Green Energy
 * Corp licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package greenbus.client;

option java_package = "io.greenbus.client.service.proto";
option java_outer_classname = "AuthRequests";
option java_generic_services = false;

import "google/protobuf/descriptor.proto";
import "CompilerExtensions.proto";

import "Auth.proto";
import "Model.proto";
import "services/ModelRequests.proto";

/*
    Description used to create or modify an Agent.

*/
message AgentTemplate {

    /*
        Identifies a pre-existing Agent, or provides a pre-determined UUID for a new Agent.

        @optional
    */
    optional ModelUUID uuid = 1;

    /*
        Identifies a pre-existing Agent, provides a name for a created Agent, or a new name for an existing Agent.

        - If a UUID is not provided and the Agent does not exist an Agent will be created with this name.
        - If a UUID is not provided and the Agent exists, the Agent will be identified and the non-name fields will be be modified.
        - If a UUID is provided and the Agent does not exist, an Agent will be created with this name.
        - If a UUID is provided and the Agent already exists, the Agent will be renamed to this name.

        @required
    */
    optional string name = 2;

    /*
        Password for the Agent. 

        - If creating a new Agent, a password is required.
        - If updating an Agent, a password is not required. Hence updating other fields in the Agent is possible without knowing the original password or changing to a new one. 

        @optional
    */
    optional string password     = 3;

    /*
        Names of PermissionSets to be assigned to this Agent. The PermissionSets must already exist.

        After modifying an existing Agent, these will be the full set of PermissionSets for that Agent. Any pre-existing PermissionSet assignments not in this list will be removed.

        Any empty list (including if the field is uninitialized) will result in the Agent having no PermissionSets.

        @required
    */
    repeated string permission_sets = 4;
}

/*
    Description of an update to an Agent's password.
*/
message AgentPasswordUpdate {

    /*
        Identifies the Agent.

        @required
    */
    optional ModelUUID uuid = 1;

    /*
        New password for the Agent.

        @required
    */
    optional string password = 2;
}

/*
    Collection of keys that identify a set of Agents.
*/
message AgentKeySet {

    /*
        UUIDs of Agents.

        @optional
    */
    repeated ModelUUID uuids = 1;

    /*
        Names of Agents.

        @optional
    */
    repeated string names = 2;
}

/*
    Query parameters to select a set of Agents.

    Agents can be matched by their types or their permission sets. Including no search parameters will return
    all Agents in the system.

    Uses paging to handle large result sets.
*/
message AgentQuery {

    /*
        Parameters to match Agents based on the names of their permission sets.

        @optional
    */
    repeated string permission_sets = 4;

    /*
        Parameters to narrow the result sets for queries.

        @optional
        @nested
    */
    optional EntityPagingParams paging_params = 14;
}

/*
    Description used to create or modify an PermissionSet.

*/
message PermissionSetTemplate {

    /*
        Identifies a pre-existing PermissionSet.

        @optional
    */
    optional ModelID id = 1;

    /*
        Name of a new PermissionSet or name to change a PermissionSet to if an ID is also provided.

        @required
    */
    optional string name = 2;

    /*
        When modifying the PermissionSet, this field will be the Permissions for this PermissionSet.
        Any pre-existing Permissions not in this list will be removed, and new Permissions will be added.

        @required
    */
    repeated Permission permissions             = 4;
}


/*
    Collection of keys that identify a set of PermissionSets.
*/
message PermissionSetKeySet {

    /*
        IDs of PermissionSets.

        @optional
    */
    repeated ModelID ids = 1;

    /*
        Names of PermissionSets.

        @optional
    */
    repeated string names = 2;
}

/*
    Query parameters to select a set of PermissionSets.

    PermissionSets can be matched by their types. Including no search parameters will return
    all PermissionSets in the system.

    Uses paging to handle large result sets.

*/
message PermissionSetQuery {

    /*
        Last UUID (in the returned sorted order) of a previous result set. This result set will be the
        page beginning from the next UUID.

        @optional
    */
    optional ModelID last_id = 14;

    /*
        The number of elements to return. Used to limit the size of result sets in large models. If not set,
        a server-determined page size will be used.

        If the size of the result set equals the page size, there may be more data available.

        @optional
    */
    optional uint32 page_size = 15;
}


message GetAgentsRequest {
    optional AgentKeySet request = 1;
}
message GetAgentsResponse {
    repeated Agent results = 1;
}
message AgentQueryRequest {
    optional AgentQuery request = 1;
}
message AgentQueryResponse {
    repeated Agent results = 1;
}
message PutAgentsRequest {
    repeated AgentTemplate templates = 1;
}
message PutAgentsResponse {
    repeated Agent results = 1;
}
message PutAgentPasswordsRequest {
    repeated AgentPasswordUpdate updates = 1;
}
message PutAgentPasswordsResponse {
    repeated Agent results = 1;
}
message DeleteAgentsRequest {
    repeated ModelUUID agent_uuids = 1;
}
message DeleteAgentsResponse {
    repeated Agent results = 1;
}

message GetPermissionSetsRequest {
    optional PermissionSetKeySet request = 1;
}
message GetPermissionSetsResponse {
    repeated PermissionSet results = 1;
}
message PermissionSetQueryRequest {
    optional PermissionSetQuery request = 1;
}
message PermissionSetQueryResponse {
    repeated PermissionSet results = 1;
}
message PutPermissionSetsRequest {
    repeated PermissionSetTemplate templates = 1;
}
message PutPermissionSetsResponse {
    repeated PermissionSet results = 1;
}
message DeletePermissionSetsRequest {
    repeated ModelID permission_set_ids = 1;
}
message DeletePermissionSetsResponse {
    repeated PermissionSet results = 1;
}



/*
    Service for the authorization management system. Enables querying and updating
    the set of Agents and PermissionSets.

    See the LoginService for login/logout methods.
*/
service AuthService {
    option (scala_package) = "io.greenbus.client.service";
    option (java_package) = "io.greenbus.japi.client.service";
    option (uri_prefix) = "auth";

    /*
        Returns a set of Agents identified specifically by UUID or name.
    */
    rpc get_agents(GetAgentsRequest) returns (GetAgentsResponse);

    /*
        Returns all Agents or those matching query parameters. Uses paging to
        handle large result sets.
    */
    rpc agent_query(AgentQueryRequest) returns (AgentQueryResponse);

    /*
        Creates or modifies a set of Agents. 
    */
    rpc put_agents(PutAgentsRequest) returns (PutAgentsResponse);

    /*
        Updates the password of a set of Agents.
    */
    rpc put_agent_passwords(PutAgentPasswordsRequest) returns (PutAgentPasswordsResponse);

    /*
        Deletes a set of Agents identified by UUID. Returns the final state of the deleted Agents.
    */
    rpc delete_agents(DeleteAgentsRequest) returns (DeleteAgentsResponse);

    /*
        Returns a set of PermissionSets identified specifically by UUID or name.
    */
    rpc get_permission_sets(GetPermissionSetsRequest) returns (GetPermissionSetsResponse);

    /*
        Returns all PermissionSets or those matching query parameters. Uses paging to
        handle large result sets.
    */
    rpc permission_set_query(PermissionSetQueryRequest) returns (PermissionSetQueryResponse);

    /*
        Creates or modifies a set of PermissionSets.
    */
    rpc put_permission_sets(PutPermissionSetsRequest) returns (PutPermissionSetsResponse);

    /*
        Deletes a set of PermissionSets identified by UUID. Returns the final state of the deleted PermissionSets.
    */
    rpc delete_permission_sets(DeletePermissionSetsRequest) returns (DeletePermissionSetsResponse);

}
