/**
 * Copyright 2011-2016 Green Energy Corp.
 *
 * Licensed to Green Energy Corp (www.greenenergycorp.com) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. Green Energy
 * Corp licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package greenbus.client;

option java_package = "io.greenbus.client.service.proto";
option java_outer_classname = "Events";

import "Model.proto";

import "ServiceEnvelopes.proto";


/*
    Represents a key-value pair, where the key is a string and the value is one of
    multiple data types.

    One of the data types must be specified.
*/
message Attribute {

    /*
        Specifies the name of the attribute.

        @required
    */
    optional string name       = 1;

    /*
        May contain the string value of the Attribute.

        @optional
    */
    optional string  value_string  = 10;

    /*
        May contain the integer value of the Attribute.

        @optional
    */
    optional sint64  value_sint64  = 11;

    /*
        May contain the double floating-point value of the Attribute.

        @optional
    */
    optional double  value_double  = 12;

    /*
        May contain the boolean value of the Attribute.

        @optional
    */
    optional bool    value_bool    = 13;
}

/*
    Represents a record of a notable occurrence in the system at a particular time.

    The message content and severity of an Event, as well as whether the Event also represents an Alarm, are determined
    through an EventConfig corresponding to the `event_type` field. Users and applications raise events by specifying the
    type of Event and the interpretation of that type is defined by the system configuration.

    Publishing an Event may also raise an Alarm; if so the Alarm points to the Event to provide contextual information.
*/
message Event {

    /*
        Unique ID for this Event.
    */
    optional ModelID   id            =  1;

    /*
        Event type, corresponding to a registered type in the event configuration.
    */
    optional string   event_type    =  2;

    /*
        Specifies whether this Event has a corresponding Alarm.
    */
    optional bool     alarm         =  3 [default = false];

    /*
        Time the Event was entered into the system.

        Time is measured in milliseconds since midnight, January 1, 1970 UTC.
    */
    optional uint64   time          =  4;

    /*
        Time of occurrence for the underlying condition that caused the Event to be published.

        Time is measured in milliseconds since midnight, January 1, 1970 UTC.

        @optional
    */
    optional uint64   device_time   =  5;

    /*
        Severity ranking for the Event. `1` is the most severe. Number of severity levels is configurable (default is 1-8).
    */
    optional uint32   severity      =  6;

    /*
        Subsystem that authored this event.
    */
    optional string   subsystem     =  7;

    /*
        Name of the Agent whose credentials were used to publish this Event.
    */
    optional string   agent_name         =  8;

    /*
        UUID of the object in the system model associated with this Event.

        @optional
    */
    optional ModelUUID   entity_uuid      =  9;

    /*
        Name of the object in the system model associated with this Event.

        @optional
    */
    optional string   entity_name     =  10;

    /*
        ID of the segment of the model this Event is associated with.

        @optional
    */
    optional string   model_group     =  12;

    /*
        The rendered message for the Event.
    */
    optional string   rendered      = 11;
}

/*
    Represents a condition that may require operator attention. Alarms are created from particular types of
    Events, and contain the additional state and workflow for operator management.

    The Event that caused the Alarm to be raised is referenced to provide contextual information.
*/
message Alarm {

    /*
        Enumerates the possible states of an Alarm.
    */
    enum State {
        UNACK_AUDIBLE  = 1;  // Audible alarm not acknowledged by an operator.
        UNACK_SILENT   = 2;  // Silent alarm not acknowledged by an operator.
        ACKNOWLEDGED  = 3;  // Alarm acknowledged by operator.
        REMOVED       = 4;  // Alarm removed from the active set.
    }

    /*
        Unique ID for the Alarm. This is a different ID than the Event ID.
    */
    optional ModelID     id          = 1;

    /*
        The current state of the Alarm. State may be modified by service requests on behalf of user actions.
    */
    optional State      state       = 2;

    /*
        The Event associated with this Alarm, provided for context.
    */
    optional Event      event       = 3;
}


/*
    Represents instructions for generate Events corresponding to a particular type.
*/
message EventConfig {

    /*
        Enumerates what form the prospective Event will take.
    */
    enum Designation {
        ALARM = 1;  // Should publish an Event and a corresponding Alarm.
        EVENT = 2;  // Should publish an Event.
        LOG   = 3;  // Should not publish an Event and instead write an entry to the system log.
    }

    /*
        Event type this EventConfig configures.
    */
    optional string           event_type    = 1;

    /*
        Severity ranking for the prospective Event. `1` is the most severe. Number of severity levels is
        configurable (default is 1-8).
    */
    optional uint32           severity      = 2;

    /*
        Determines whether Events published with this type will be just Events, Events and Alarms, or will be demoted
        to log entries.
    */
    optional Designation      designation   = 3;

    /*
        If `designation` is `ALARM`, specifies the initial state of the raised Alarm.

        Irrelevant if an Alarm is not raised.

        @optional
    */
    optional Alarm.State      alarm_state   = 4;

    /*
        Specifies the template for Event messages. Parameters are specified by enclosing the name of the key in the Attribute
        list in braces.

        Example:

        <pre><code>
        Resource: "The {subject} jumped over the {object}."
        Attributes: ["subject -> "cow", "object" -> "moon"]
        </code></pre>

        If an Attribute is not present, the key name itself will appear in the message.
    */
    optional string           resource      = 5;

    /*
        Specifies whether this Event type is used by core system services and cannot be deleted.
    */
    optional bool             built_in      = 6;
}


/*
    Notification of a change to an Event.
*/
message EventNotification {

    /*
        Updated state of the object.
    */
    optional Event value = 2;
}

/*
    Notification of a change to an Alarm.
*/
message AlarmNotification {

    /*
        Whether object was added, removed, or modified.
    */
    optional greenbus.client.envelope.SubscriptionEventType event_type = 1;

    /*
        Updated state of the object.
    */
    optional Alarm value = 2;
}