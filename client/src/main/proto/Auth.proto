/**
 * Copyright 2011-2016 Green Energy Corp.
 *
 * Licensed to Green Energy Corp (www.greenenergycorp.com) under one or more
 * contributor license agreements. See the NOTICE file distributed with this
 * work for additional information regarding copyright ownership. Green Energy
 * Corp licenses this file to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package greenbus.client;

option java_package = "io.greenbus.client.service.proto";
option java_outer_classname = "Auth";


import "Model.proto";

/*
    Represents an actor in the system to be authenticated and authorized to perform
    service requests.

    Agents have an associated password not featured in the resource view.
*/
message Agent {

    /*
        Unique identifier across all Agents.
    */
    optional ModelUUID uuid = 1;

    /*
        Unique name across all Agents.
    */
    optional string name = 2;

    /*
        Names of PermissionSets associated with this Agent.
    */
    repeated string permission_sets = 4;
}

/*
    Narrows the system model to a more specific set of Entities relevant to an authorization Permission.
*/
message EntitySelector {

    /*
        Specifies the _style_, or type, of selector. Options are:

        - `*`: Selects all Entities. Equivalent to not having specified an EntitySelector. No arguments are required.
        - `self`: Selects only the Agent associated with the auth token. An example would be to provide rename and password change
            privileges for a user. No arguments are required.
        - `type`: Selects Entities that have at least one of the specified types. Arguments are the relevant type list.
            Must provide at least one argument.
        - `parent`: Selects Entities by hierarchical relationship. Arguments are a list of Entity names that form the parent
            set. All Entities that are children (immediate or derived) of one of the parents through an `owns` relationship will
            be selected. Must provide at least one argument.

    */
    optional string  style     = 2;

    /*
        Arguments for the selector whose meaning depend on the selector style.

        @optional
    */
    repeated string  arguments = 3;
}

/*
    Represents allowing or disallowing a set of actions across a set of resources, with
    an optional filter for a set of Entities.

    When multiple resources and multiple actions are specified, the authorization is applied for all combinations
    of resources and actions.

    Permissions for all resources default to denial. If allows and denies overlap, the resource/action
    will be denied.
*/
message Permission {

    /*
        Whether the Permission allows (true) or disallows (false) the actions on the resource.
    */
    optional bool    allow    = 2;

    /*
        Resources (e.g. `entity`, `point`, `agent`) the permission applies to.

        Using `*` will specify all resources.
    */
    repeated string  resources = 3;

    /*
        Actions (e.g. `create`, `read`, `update`, `delete`)  the permission allows or disallows.

        Using `*` will specify all actions.
    */
    repeated string  actions     = 4;

    /*
        When provided, narrows the specified resources to apply only to a set of Entities in the system
        model.

        @optional
    */
    repeated EntitySelector  selectors = 5;
}

/*
    Represents a set of Permissions authorizing an Agent to perform service requests.
*/
message PermissionSet {

    /*
        Unique identifier across all PermissionSets.
    */
    optional ModelID id = 1;

    /*
        Unique name across all PermissionSets.
    */
    optional string name = 2;

    /*
        Descriptions of the allowed and disallowed actions that can be taken on resources.
    */
    repeated Permission permissions             = 4;
}


/*
    Represents an auth token entry created as a result of authentication on user login.
*/
message AuthToken {

    /*
        ID of this AuthToken.
    */
    optional ModelID        id              = 1;

    /*
        UUID of the Agent whose credentials were used to create this token.
    */
    optional ModelUUID      agent_uuid      = 2;

    /*
        Contextual information about the user or process obtaining the auth token.
    */
    optional string        login_location  = 3;

    /*
        PermissionSets granted by this auth token.
    */
    repeated PermissionSet permission_sets = 4;

    /*
        Auth token resulting from a successful login. Can be included in subsequent service requests in order to
        authorize them.
    */
    optional string        token           = 5;

    /*
        Expiration time for this auth token. After this time the auth token will be rejected and a new token
        will need to be acquired.

        Time is measured in milliseconds since midnight, January 1, 1970 UTC.
    */
    optional uint64        expiration_time = 6;

    /*
        Provides contextual information about the client software version.
    */
    optional string        client_version  = 7;

    /*
        Whether the auth token has been revoked by a user logout or another process.
    */
    optional bool          revoked         = 8;

    /*
        Record of the time the auth token was issued.

        Time is measured in milliseconds since midnight, January 1, 1970 UTC.
    */
    optional uint64        issue_time      = 9;
}
